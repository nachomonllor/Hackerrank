
https://www.hackerrank.com/challenges/frequency-queries/problem?isFullScreen=true&h_l=interview&playlist_slugs%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D=dictionaries-hashmaps

-----------------------------------C++ --------------------------------

#include <bits/stdc++.h>

using namespace std;

string ltrim(const string &);
string rtrim(const string &);
vector<string> split(const string &);

// Complete the freqQuery function below.
vector<int> freqQuery(vector<vector<int>> queries) {
    
    map<long, long> frec;
    map<long, long> frec_frec;
    vector<int> ans;

    for (int i = 0; i < queries.size(); i++)
    {
        long num = queries[i][0];
        long X = queries[i][1];

        if (num == 1)
        {
            //1 x Insert x in your data structure
            if (frec_frec[frec[X]] - 1 >= 0) frec_frec[frec[X]]--;
            frec[X]++;
            frec_frec[frec[X]]++;
        }

        else if (num == 2)
        {
            //2 y Delete one occurence of y from your data structure, if present.
            if (frec_frec[frec[X]] - 1 >= 0) frec_frec[frec[X]]--;
            if (frec[X] - 1 >= 0) frec[X]--;
            frec_frec[frec[X]]++;
        }
        else if (num == 3)
        {
            //3 z Check if any integer is present whose frequency is exactly z. If yes,
            //print 1 else 0.
            if (frec_frec[X] > 0) ans.push_back(1);
            else ans.push_back(0);
        }
    }

    return ans;

}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string q_temp;
    getline(cin, q_temp);

    int q = stoi(ltrim(rtrim(q_temp)));

    vector<vector<int>> queries(q);

    for (int i = 0; i < q; i++) {
        queries[i].resize(2);

        string queries_row_temp_temp;
        getline(cin, queries_row_temp_temp);

        vector<string> queries_row_temp = split(rtrim(queries_row_temp_temp));

        for (int j = 0; j < 2; j++) {
            int queries_row_item = stoi(queries_row_temp[j]);

            queries[i][j] = queries_row_item;
        }
    }

    vector<int> ans = freqQuery(queries);

    for (int i = 0; i < ans.size(); i++) {
        fout << ans[i];

        if (i != ans.size() - 1) {
            fout << "\n";
        }
    }

    fout << "\n";

    fout.close();

    return 0;
}

string ltrim(const string &str) {
    string s(str);

    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), not1(ptr_fun<int, int>(isspace)))
    );

    return s;
}

string rtrim(const string &str) {
    string s(str);

    s.erase(
        find_if(s.rbegin(), s.rend(), not1(ptr_fun<int, int>(isspace))).base(),
        s.end()
    );

    return s;
}

vector<string> split(const string &str) {
    vector<string> tokens;

    string::size_type start = 0;
    string::size_type end = 0;

    while ((end = str.find(" ", start)) != string::npos) {
        tokens.push_back(str.substr(start, end - start));

        start = end + 1;
    }

    tokens.push_back(str.substr(start));

    return tokens;
}




------------------------------------ C# -----------------------------


using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;

class Solution
{

    // Complete the freqQuery function below.
    static List<int> freqQuery(List<List<int>> queries)
    {

        Dictionary<long, long> frec = new Dictionary<long, long>();
        Dictionary<long, long> frec_frec = new Dictionary<long, long>();
        List<int> ans = new List<int>();

        foreach (List<int> q in queries)
        {
            long num = q.First();
            long X = q.Last();

            if (num == 1)
            {
                //1 x Insert x in your data structure
                if (frec.ContainsKey(X))
                {
                    if (frec_frec.ContainsKey(frec[X]))
                    {
                        if (frec_frec[frec[X]] - 1 >= 0)
                        {
                            frec_frec[frec[X]]--;
                        }
                    }

                    frec[X]++;
                }
                else
                {
                    frec[X] = 1;
                }

                if (frec_frec.ContainsKey(frec[X]))
                {
                    frec_frec[frec[X]]++;
                }
                else
                {
                    frec_frec[frec[X]] = 1;
                }


            }

            else if (num == 2)
            {
                //2 y Delete one occurence of y from your data structure, if present.
                if (frec.ContainsKey(X))
                {
                    if (frec_frec.ContainsKey(frec[X]))
                    {
                        if (frec_frec[frec[X]] - 1 >= 0)
                        {
                            frec_frec[frec[X]]--;
                        }
                    }

                    if (frec[X] - 1 >= 0)
                    {
                        frec[X]--;
                    }

                    if (frec_frec.ContainsKey(frec[X]))
                    {
                        frec_frec[frec[X]]++;
                    }
                    else
                    {
                        frec_frec[frec[X]] = 1;
                    }
                }
            }
            else if (num == 3)
            {
                //3 z Check if any integer is present whose frequency is exactly z. If yes,
                //print 1 else 0.
                if (frec_frec.ContainsKey(X) && frec_frec[X] > 0)
                {
                    ans.Add(1);
                }
                else
                {
                    ans.Add(0);
                }
            }
        }

        return ans;




    }

    static void Main(string[] args)
    {
        // TextWriter textWriter = new StreamWriter(@System.Environment.GetEnvironmentVariable("C:/Users/usuario/Desktop/salida.txt"), true);

        //int q = Convert.ToInt32(Console.ReadLine().Trim());
        int q = 8;

        List<List<int>> queries = new List<List<int>>();

        //for (int i = 0; i < q; i++)
        //{
        //    queries.Add(Console.ReadLine().TrimEnd().Split(' ').ToList().Select(queriesTemp => Convert.ToInt32(queriesTemp)).ToList());
        //}
        queries.Add(new List<int>(new int[] { 1, 5 }));
        queries.Add(new List<int>(new int[] { 1, 6 }));
        queries.Add(new List<int>(new int[] { 3, 2 }));
        queries.Add(new List<int>(new int[] { 1, 10 }));
        queries.Add(new List<int>(new int[] { 1, 10 }));
        queries.Add(new List<int>(new int[] { 1, 6 }));
        queries.Add(new List<int>(new int[] { 2, 5 }));
        queries.Add(new List<int>(new int[] { 3, 2 }));


        List<int> ans = freqQuery(queries);

        Console.WriteLine(String.Join("\n", ans));

        //textWriter.Flush();
        //textWriter.Close();

        Console.ReadLine();
    }
}


