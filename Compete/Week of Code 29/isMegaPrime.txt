using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace ConsoleApplication1
{
    class Program
    {

        static bool isMegaPrime(long n)
        {
            string ns = n.ToString();
            string noPrimos = "14689";//2357

            foreach (char ch in ns)
            {
                if (ns.Contains(ch))
                {
                    return false;
                }
            }

            if (n < 2) return false;
            if (n == 2) return true;
            if (n % 2 == 0) return false;

            long sqr = (long)Math.Sqrt(n);
            for (int i = 3; i <= sqr; i += 2)
            {
                if (n % i == 0)
                {
                    return false;
                }
            }
            return true;
        }

        static void Main(string[] args)
        {

            string[] input = Console.ReadLine().Split(' ');
            long first = long.Parse(Console.ReadLine());
            long last = long.Parse(Console.ReadLine());

            long ans = 0;
            for (long i = first; i <= last; i++)
            {
                if (isMegaPrime(i))
                {
                    ans++;
                }
            }
            Console.WriteLine(ans);

            Console.ReadLine();
        }
    }
}

---------------------------------------------



import sys

def _try_composite(a, d, n, s):
    if pow(a, d, n) == 1:
        return False
    for i in range(s):
        if pow(a, 2**i * d, n) == n-1:
            return False
    return True # n  is definitely composite
 
def is_prime(n, _precision_for_huge_n=16):
    if n in _known_primes or n in (0, 1):
        return True
    if any((n % p) == 0 for p in _known_primes):
        return False
    d, s = n - 1, 0
    while not d % 2:
        d, s = d >> 1, s + 1
    # Returns exact according to http://primes.utm.edu/prove/prove2_3.html
    if n < 1373653: 
        return not any(_try_composite(a, d, n, s) for a in (2, 3))
    if n < 25326001: 
        return not any(_try_composite(a, d, n, s) for a in (2, 3, 5))
    if n < 118670087467: 
        if n == 3215031751: 
            return False
        return not any(_try_composite(a, d, n, s) for a in (2, 3, 5, 7))
    if n < 2152302898747: 
        return not any(_try_composite(a, d, n, s) for a in (2, 3, 5, 7, 11))
    if n < 3474749660383: 
        return not any(_try_composite(a, d, n, s) for a in (2, 3, 5, 7, 11, 13))
    if n < 341550071728321: 
        return not any(_try_composite(a, d, n, s) for a in (2, 3, 5, 7, 11, 13, 17))
    # otherwise
    return not any(_try_composite(a, d, n, s) 
                   for a in _known_primes[:_precision_for_huge_n])
 
_known_primes = [2, 3]
_known_primes += [x for x in range(5, 1000, 2) if is_prime(x)]


def isMegaPrime(n):
    ns = str(n)
    noPrimos = "146890"
    
    for ch in ns:
        if ch in noPrimos:
            return False
    
    return is_prime(n)

first,last = raw_input().strip().split(' ')
first,last = [long(first),long(last)]

ans =0

if first <= 2:
    ans += 1

if first % 2 ==0:
    first += 1

'''
for i in range(first, last+1, 2):
    if isMegaPrime(i):
        ans += 1
'''

sum =0
i = first
while i <= last:
    if isMegaPrime(i):
        ans += 1
        sum += ans
        print sum
    i+=2


print ans 










